
global_defs {
   router_id LVS_DEVEL
   script_user username [groupname]
   enable_script_security
}

vrrp_script check_apiserver {
   script "/etc/keepalived/check_apiserver.sh"
   # seconds between script invocations, (default: 1 second)
   interval 2

   # seconds after which script is considered to have failed
   # timeout <INTEGER>

   # required number of successes for KO transition
   fall 2       # require 2 failures for KO
   # required number of successes for OK transition
   rise 2       # require 2 successes for OK

   # adjust priority by this weight, (default: 0)
   # For description of reverse, see track_script.
   # 'weight 0 reverse' will cause the vrrp instance to be down when the
   # script is up, and vice versa.
   # weight <INTEGER:-253..253> [reverse]
   weight -100

   #  group default to group of user
   # user USERNAME [GROUPNAME]
   user root

}

vrrp_instance vi{{ KEEPALIVE_id }} {
        virtual_router_id {{ KEEPALIVE_id }}
        state BACKUP
        priority {{ 150 - groups['master'].index(inventory_hostname)*10 }}
        interface {{ ansible_default_ipv4.interface }}
        virtual_ipaddress {
                {{ VIPIP_KEEPALIVE }} dev {{ ansible_default_ipv4.interface }} label {{ ansible_default_ipv4.interface }}:1 # Virtual IP
        }
        unicast_src_ip {{ ansible_default_ipv4.address }}
        unicast_peer {
{% for host_lb in groups['master'] %}{% if  hostvars[host_lb]['ansible_facts']['default_ipv4']['address']  != ansible_default_ipv4.address %}
           {{ hostvars[host_lb]['ansible_facts']['default_ipv4']['address'] }}
{% endif %}{% endfor %}
        }
        authentication {
            auth_type {{ keepalived_auth_type }}
            auth_pass {{ keepalived_auth_pass }}
        }
        track_script {
                check_apiserver
        }
}
