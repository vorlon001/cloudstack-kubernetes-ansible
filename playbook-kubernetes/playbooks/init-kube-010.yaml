
  - block:
#    - name: Run openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1
#      shell: |
#        openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1
#      register: SHA256_TOKENS
#      when:
#      - inventory_hostname in groups['bootstrap']

    - name: Run openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1
      shell: |
        openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1
      register: SHA256_TOKENS
      when:
      - inventory_hostname in groups['bootstrap']
      - KUBEADM_ClusterConfiguration.encryptionAlgorithm != "ECDSA-P256"

    - name: Run openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl ec -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1
      shell: |
        openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl ec -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1
      register: SHA256_TOKENS
      when:
      - inventory_hostname in groups['bootstrap']
      - KUBEADM_ClusterConfiguration.encryptionAlgorithm == "ECDSA-P256"


    - name: Print return information from the previous task
      ansible.builtin.debug:
        var: SHA256_TOKENS['stdout']
      when:
      - inventory_hostname in groups['bootstrap']
    - name: Run kubeadm init phase upload-certs --upload-certs 2>&1 | grep -o -E '^[[:alnum:]]{64}'
      shell: |
        kubeadm init phase upload-certs --upload-certs 2>&1 | grep -o -E '^[[:alnum:]]{64}'
      register: UPLOADTLSKEYS
      when:
      - inventory_hostname in groups['bootstrap']
    - name: Print return information from the previous task
      ansible.builtin.debug:
        var: UPLOADTLSKEYS['stdout']
      when:
      - inventory_hostname in groups['bootstrap']
    - delegate_to: localhost
      copy:
        content: "UPLOADTLSKEY: \"{{UPLOADTLSKEYS['stdout']}}\""
        dest: /tmp/join-UPLOADTLSKEY.yml
      when:
      - inventory_hostname in groups['bootstrap']
    - delegate_to: localhost
      copy:
        content: "SHA256_TOKEN: \"{{SHA256_TOKENS['stdout']}}\""
        dest: /tmp/join-command.yml
      when:
      - inventory_hostname in groups['bootstrap']
    - name: Load a variable file /tmp/join-UPLOADTLSKEY.yml
      include_vars: /tmp/join-UPLOADTLSKEY.yml
      when:
      - inventory_hostname in groups['masterjoin']

    - name: Load a variable file /tmp/join-command.yml
      include_vars: /tmp/join-command.yml
      when:
      - inventory_hostname in groups['masterjoin']
    - name: Print vars UPLOADTLSKEY
      ansible.builtin.debug:
        var: UPLOADTLSKEY
      when:
      - inventory_hostname in groups['masterjoin']
    - name: Print vars SHA256_TOKEN
      ansible.builtin.debug:
        var: SHA256_TOKEN
      when:
      - inventory_hostname in groups['masterjoin']


    - name: Run mkdir -p /etc/kubernetes/policies/
      ansible.builtin.shell: mkdir -p /etc/kubernetes/policies/
      args:
        executable: /bin/bash
      register: logs
      when:
      - inventory_hostname in groups['masterjoin']
    - debug: var=logs.stdout_lines

    - name: Run copy audit-policy.yaml /etc/kubernetes/policies/
      template:
        src: "audit-policy.yaml.j2"
        dest: /etc/kubernetes/policies/audit-policy.yaml
        mode: '0644'
      when:
      - inventory_hostname in groups['masterjoin']

    - name: Run mkdir -p /etc/kubernetes/kubeadm/patches/
      ansible.builtin.shell: mkdir -p /etc/kubernetes/kubeadm/patches/
      args:
        executable: /bin/bash
      register: logs
      when:
      - inventory_hostname in groups['master']
      - KUBEADM_Patch_init== "yes"
    - debug: var=logs.stdout_lines
      when:
      - inventory_hostname in groups['master']
      - KUBEADM_Patch_init== "yes"

    - name: Copy Patch kube-apiserver.yaml
      template:
        src: "patch-kube-apiserver.yaml.{{KUBEADM_CONFIG_VERSION}}.j2"
        dest: /etc/kubernetes/kubeadm/patches/kube-apiserver.yaml
        mode: '0644'
      when:
      - inventory_hostname in groups['master']
      - KUBEADM_Patch_init== "yes"

    - name: Copy Patch kube-controller-manager.yaml
      template:
        src: "patch-kube-controller-manager.yaml.{{KUBEADM_CONFIG_VERSION}}.j2"
        dest: /etc/kubernetes/kubeadm/patches/kube-controller-manager.yaml
        mode: '0644'
      when:
      - inventory_hostname in groups['master']
      - KUBEADM_Patch_init== "yes"

    - name: Copy Patch kube-scheduler.yaml
      template:
        src: "patch-kube-scheduler.yaml.{{KUBEADM_CONFIG_VERSION}}.j2"
        dest: /etc/kubernetes/kubeadm/patches/kube-scheduler.yaml
        mode: '0644'
      when:
      - inventory_hostname in groups['master']
      - KUBEADM_Patch_init== "yes"

    - name: Copy Patch corednsdeployment.yaml
      template:
        src: "patch-corednsdeployment.yaml.{{KUBEADM_CONFIG_VERSION}}.j2"
        dest: /etc/kubernetes/kubeadm/patches/corednsdeployment.yaml
        mode: '0644'
      when:
      - inventory_hostname in groups['master']
      - KUBEADM_Patch_init== "yes"

    - name: Copy Patch etcd.yaml
      template:
        src: "patch-etcd.yaml.{{KUBEADM_CONFIG_VERSION}}.j2"
        dest: /etc/kubernetes/kubeadm/patches/etcd.yaml
        mode: '0644'
      when:
      - inventory_hostname in groups['master']
      - KUBEADM_Patch_init== "yes"


    - name: Copy join.yaml
      template:
        src: "join-master.{{KUBEADM_CONFIG_VERSION}}.yaml.j2"
        dest: /root/join-master.yaml
        owner: root
        group: root
        mode: '0644'
      when:
      - inventory_hostname in groups['masterjoin']


    - name: Run kubeadm join --config=./join-master.yaml
      shell: |
         kubeadm join --config=./join-master.yaml
      throttle: 1
      register: logs
      when:
      - inventory_hostname in groups['masterjoin']
    - debug: var=logs.stdout_lines
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
