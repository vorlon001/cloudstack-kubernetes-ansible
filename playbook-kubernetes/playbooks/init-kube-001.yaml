
  - block:
    - name: Remove dependencies that are no longer required
      apt:
        autoremove: yes

    - name: Copy ubuntu-sources.list.j2
      template:
        src: "ubuntu-sources.list.j2"
        dest: "/etc/apt/sources.list"
        owner: "root"
        group: "root"
        mode: '0644'
      when: ansible_distribution == 'Ubuntu'

    - name: Copy debian-sources.list.j2
      template:
        src: "debian-sources.list.j2"
        dest: "/etc/apt/sources.list"
        owner: "root"
        group: "root"
        mode: '0644'
      when: ansible_distribution == 'Debian'

    - name: Install a list of packages
      ansible.builtin.apt:
        update_cache: yes
        pkg:
          - locales
          - mc

    - name: Run patch /etc/locale.gen
      ansible.builtin.shell: sed -i -e "s/# ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/" /etc/locale.gen
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines


    - name: Run patch /etc/locale.gen
      ansible.builtin.shell: sed -i -e "s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/" /etc/locale.gen
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines


    - name: Run dpkg-reconfigure --frontend=noninteractive locales
      ansible.builtin.shell: dpkg-reconfigure --frontend=noninteractive locales
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run echo "nameserver {{ NAMESERVER }}" >>/etc/resolv.conf
      ansible.builtin.shell: echo "nameserver {{ NAMESERVER }}" >>/etc/resolv.conf
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run dpkg-reconfigure --frontend=noninteractive locales
      ansible.builtin.shell: dpkg-reconfigure --frontend=noninteractive locales
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines


    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400


    - name: Install a list of packages
      ansible.builtin.apt:
        update_cache: yes
        pkg:
          - locales-all
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - nfs-common

    - name: Copy modules-load.d-containerd.conf
      template:
        src: "modules-load.d-containerd.conf.j2"
        dest: "/etc/modules-load.d/containerd.conf"
        owner: "root"
        group: "root"
        mode: '0644'

    - name: Run modprobe overlay
      ansible.builtin.shell: modprobe overlay
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run modprobe br_netfilter
      ansible.builtin.shell: modprobe br_netfilter
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines


    - name: Copy modules-load.d-containerd.conf
      template:
        src: "sysctl-99-kubernetes-cri.conf.j2"
        dest: "/etc/sysctl.d/99-kubernetes-cri.conf"
        owner: "root"
        group: "root"
        mode: '0644'

    - name: Copy modules-load.d-containerd.conf
      template:
        src: "security-limits.conf.j2"
        dest: "/etc/security/limits.conf"
        owner: "root"
        group: "root"
        mode: '0644'


    - name: Run sysctl --system
      ansible.builtin.shell: sysctl --system
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Copy IMAGES/kubeadm.amd64.{{kube_version}}
      ansible.builtin.copy:
        src: IMAGES/crictl-{{crictl_version}}-linux-amd64.tar.gz
        dest: /tmp
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: Run tar Cxzvf /usr/local/bin /tmp/crictl-{{crictl_version}}-linux-amd64.tar.gz
      ansible.builtin.shell: tar Cxzvf /usr/local/bin /tmp/crictl-{{crictl_version}}-linux-amd64.tar.gz
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run chmod +x /usr/local/bin/crictl
      ansible.builtin.shell: chmod +x /usr/local/bin/crictl
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines


    - name: Copy IMAGES/kubeadm.amd64.{{kube_version}}
      ansible.builtin.copy:
        src: IMAGES/containerd-{{ containerd_version }}-linux-amd64.tar.gz
        dest: /tmp
        owner: root
        group: root
        mode: '0777'
        backup: yes

    - name: Run tar Cxzvf /usr/local ./IMAGES/containerd-{{ containerd_version }}-linux-amd64.tar.gz
      ansible.builtin.shell: tar Cxzvf /usr/local /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Copy containerd.service
      ansible.builtin.copy:
        src: containerd.service
        dest: /etc/systemd/system/containerd.service
        owner: root
        group: root
        mode: '0777'
        backup: yes

    - name: Copy runc
      ansible.builtin.copy:
        src: IMAGES/runc.{{image_arch}}
        dest: /usr/local/sbin/runc
        owner: root
        group: root
        mode: '0777'
        backup: yes


    - name: Copy runsc
      ansible.builtin.copy:
        src: IMAGES/runsc
        dest: /usr/local/sbin/runsc
        owner: root
        group: root
        mode: '0777'
        backup: yes
      when:
         - DEPLOY_GVISOR|bool == true

    - name: Copy containerd-shim-runsc-v1
      ansible.builtin.copy:
        src: IMAGES/containerd-shim-runsc-v1
        dest: /usr/local/sbin/containerd-shim-runsc-v1
        owner: root
        group: root
        mode: '0777'
        backup: yes
      when:
         - DEPLOY_GVISOR|bool == true


    - name: Run tar Cxzvf /usr/local /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
      ansible.builtin.shell: tar Cxzvf /usr/local /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines


    - name: Run mkdir -p /opt/cni/bin
      ansible.builtin.shell: mkdir -p /opt/cni/bin
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Copy containerd.service
      ansible.builtin.copy:
        src: IMAGES/cni-plugins-linux-{{image_arch}}-v{{cni_version}}.tgz
        dest: /tmp
        owner: root
        group: root
        mode: '0777'
        backup: yes

    - name: Run tar Cxzvf /opt/cni/bin /tmp/cni-plugins-linux-{{image_arch}}-v{{cni_version}}.tgz
      ansible.builtin.shell: tar Cxzvf /opt/cni/bin /tmp/cni-plugins-linux-{{image_arch}}-v{{cni_version}}.tgz
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines


    - name: Copy kata-containers
      ansible.builtin.copy:
        src: IMAGES/kata-static-amd64.tar.xz
        dest: /tmp/kata-static-amd64.tar.xz
        owner: root
        group: root
        mode: '0777'
        backup: yes
      when:
         - DEPLOY_KATA|bool == true

    - name: Run tar -xvf /tmp/kata-static-amd64.tar.xz -C /
      ansible.builtin.shell: tar -xvf /tmp/kata-static-amd64.tar.xz -C /
      args:
        executable: /bin/bash
      register: logs
      when:
         - DEPLOY_KATA|bool == true
    - debug: var=logs.stdout_lines
      when:
         - DEPLOY_KATA|bool == true

    - name: Run mkdir -p /etc/containerd
      ansible.builtin.shell: mkdir -p /etc/containerd
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run chown -R root:root /opt/cni/bin
      ansible.builtin.shell: chown -R root:root /opt/cni/bin
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run containerd config default | sudo tee /etc/containerd/config.toml
      ansible.builtin.shell: containerd config default | sudo tee /etc/containerd/config.toml
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run sed -i -e "s|SystemdCgroup = false|SystemdCgroup = true|" /etc/containerd/config.toml
      ansible.builtin.shell: sed -i -e "s|SystemdCgroup = false|SystemdCgroup = true|" /etc/containerd/config.toml
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run sed -i -e "s|sandbox = 'registry.k8s.io/pause:3.10'|sandbox = 'harbor.iblog.pro/registry.k8s.io/pause:3.10'|" /etc/containerd/config.toml
      ansible.builtin.shell: sed -i -e "s|sandbox = 'registry.k8s.io/pause:3.10'|sandbox = 'harbor.iblog.pro/registry.k8s.io/pause:3.10'|" /etc/containerd/config.toml
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run sed -i -e 's|config_path = ""|config_path = "/etc/containerd/certs.d"|' /etc/containerd/config.toml
      ansible.builtin.shell: sed -i -e 's|config_path = ""|config_path = "/etc/containerd/certs.d"|' /etc/containerd/config.toml
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Copy containerd.service
      ansible.builtin.copy:
        src: CONTAINERED.CONF/certs.d
        dest: /etc/containerd
        owner: root
        group: root
        mode: '666'
        backup: yes

    - name: Add config containerd gvisor
      shell:
        cmd: |
          cat <<EOF>>/etc/containerd/config.toml
          [plugins."io.containerd.cri.v1.runtime".containerd.runtimes.runsc]
            runtime_type = "io.containerd.runsc.v1"
          [plugins."io.containerd.cri.v1.runtime".containerd.runtimes.gvisor]
            runtime_type = "io.containerd.runsc.v1"
          EOF
      args:
        executable: /bin/bash
      register: logs
      when:
         - DEPLOY_GVISOR|bool == true
    - debug: var=logs.stdout_lines
      when:
         - DEPLOY_GVISOR|bool == true

    - name: Add config containerd kata-containers
      shell:
        cmd: |
          cat <<EOF>>/etc/containerd/config.toml
          [plugins."io.containerd.cri.v1.runtime".containerd.runtimes.kata-clh]
          runtime_type = "io.containerd.kata-clh.v2"
          runtime_path = "/opt/kata/bin/containerd-shim-kata-v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.cri.v1.runtime".containerd.runtimes.kata-clh.options]
          ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-clh.toml"
          [plugins."io.containerd.cri.v1.runtime".containerd.runtimes.kata-cloud-hypervisor]
          runtime_type = "io.containerd.kata-cloud-hypervisor.v2"
          runtime_path = "/opt/kata/runtime-rs/bin/containerd-shim-kata-v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.cri.v1.runtime".containerd.runtimes.kata-cloud-hypervisor.options]
          ConfigPath = "/opt/kata/share/defaults/kata-containers/runtime-rs/configuration-cloud-hypervisor.toml"
          [plugins."io.containerd.cri.v1.runtime".containerd.runtimes.kata-qemu]
          runtime_type = "io.containerd.kata-qemu.v2"
          runtime_path = "/opt/kata/bin/containerd-shim-kata-v2"
          privileged_without_host_devices = true
          pod_annotations = ["io.katacontainers.*"]
          [plugins."io.containerd.cri.v1.runtime".containerd.runtimes.kata-qemu.options]
          ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"
          EOF
      args:
        executable: /bin/bash
      register: logs
      when:
         - DEPLOY_KATA|bool == true
    - debug: var=logs.stdout_lines
      when:
         - DEPLOY_KATA|bool == true



    - name: systemd daemon_reload
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable service containerd and ensure
      ansible.builtin.systemd:
        name: containerd
        enabled: true

    - name: Start service containerd
      ansible.builtin.systemd:
        name: containerd
        state: started
        enabled: true


#    - name: Run cat /etc/containerd/config.toml | grep SystemdCgroup
#      ansible.builtin.shell: cat /etc/containerd/config.toml | grep SystemdCgroup
#      args:
#        executable: /bin/bash
#      register: logs
#    - debug: var=logs.stdout_lines


    - name: Run ctr images pull {{TEST_HARBOR}}
      ansible.builtin.shell: ctr images pull {{TEST_HARBOR}}
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run ctr images ls
      ansible.builtin.shell: ctr images ls
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines



    - name: Run ctr test gvisor|kata
      ansible.builtin.shell: |
              ctr image pull harbor.iblog.pro/test/ubuntu:main.ubuntu.24.04
              ctr run --runtime io.containerd.runsc.v1 -t --rm harbor.iblog.pro/test/ubuntu:main.ubuntu.24.04 hello uname -r
              ctr run --runtime io.containerd.run.runsc.v1 -t --rm harbor.iblog.pro/test/ubuntu:main.ubuntu.24.04 gvisord uname -r
              ctr run --runtime "io.containerd.kata.v2" -t --rm harbor.iblog.pro/test/ubuntu:main.ubuntu.24.04 hello uname -r
      args:
        executable: /bin/bash
      register: logs
      when:
         - DEPLOY_KATA|bool == true
    - debug: var=logs.stdout_lines
      when:
         - DEPLOY_KATA|bool == true


    - name: Copy etc-crictl.yaml.j2
      template:
        src: "etc-crictl.yaml.j2"
        dest: "/etc/crictl.yaml"
        owner: "root"
        group: "root"
        mode: '0644'

    - name: Copy IMAGES/kubeadm.amd64.{{kube_version}}
      ansible.builtin.copy:
        src: IMAGES/kubeadm.amd64.{{kube_version}}
        dest: /usr/bin/kubeadm
        owner: root
        group: root
        mode: '0777'
        backup: yes

    - name: Copy IMAGES/kubectl.amd64.{{kube_version}}
      ansible.builtin.copy:
        src: IMAGES/kubectl.amd64.{{kube_version}}
        dest: /usr/bin/kubectl
        owner: root
        group: root
        mode: '0777'
        backup: yes

    - name: Copy IMAGES/kubelet.amd64.{{kube_version}}
      ansible.builtin.copy:
        src: IMAGES/kubelet.amd64.{{kube_version}}
        dest: /usr/bin/kubelet
        owner: root
        group: root
        mode: '0777'
        backup: yes

    - name: Run mkdir -p /etc/kubernetes
      ansible.builtin.shell: mkdir -p /etc/kubernetes
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Install a list of packages
      ansible.builtin.apt:
        update_cache: yes
        pkg:
          - iptables
          - iproute2
          - socat
          - util-linux
          - mount
          - ebtables
          - ethtool
          - conntrack

    - name: Run mkdir -p /etc/systemd/system/kubelet.service.d/
      ansible.builtin.shell: mkdir -p /etc/systemd/system/kubelet.service.d/
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines


    - name: Copy kubelet.service.d-10-kubeadm.conf.j2
      template:
        src: "kubelet.service.d-10-kubeadm.conf.j2"
        dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
        owner: "root"
        group: "root"
        mode: '0644'

    - name: Copy kubelet.service.j2
      template:
        src: "kubelet.service.j2"
        dest: "/lib/systemd/system/kubelet.service"
        owner: "root"
        group: "root"
        mode: '0644'

    - name: systemd daemon_reload
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable service kubelet and ensure
      ansible.builtin.systemd:
        name: kubelet
        enabled: true

    - name: Start service kubelet
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true

    - name: Run kubeadm config images pull --image-repository {{ k8s_regestry }} --kubernetes-version {{ kube_version }}
      ansible.builtin.shell: kubeadm config images pull --image-repository {{ k8s_regestry }} --kubernetes-version {{ kube_version }}
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    - name: Run mkdir -p /etc/kubernetes/manifests
      ansible.builtin.shell: mkdir -p /etc/kubernetes/manifestsmkdir -p /etc/kubernetes/manifests
      args:
        executable: /bin/bash
      register: logs
    - debug: var=logs.stdout_lines

    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
