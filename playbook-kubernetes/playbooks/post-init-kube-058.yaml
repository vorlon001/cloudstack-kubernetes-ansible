
    - name: Deploy Nginx Ingress
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      community.kubernetes.helm:
        name: "cloudstack-{{item.0.key}}"
        chart_ref: "{{INGRESS.NGINX.chart_ref}}"
        release_state: "{{INGRESS.NGINX.release_state}}"
        update_repo_cache: "{{INGRESS.NGINX.update_repo_cache}}"
        release_namespace: "{{item.0.key}}"
        create_namespace: "{{INGRESS.NGINX.create_namespace}}"
        chart_version: "{{INGRESS.NGINX.chart_version}}"
        values:
          controller:
            image:
              chroot: false
              registry: "{{INGRESS.NGINX.controller_registry}}"
              image: "{{INGRESS.NGINX.controller_image}}"
              tag: "{{INGRESS.NGINX.controller_tag}}"
              digest: "{{INGRESS.NGINX.controller_digest}}"
              digestChroot: "{{INGRESS.NGINX.controller_digestChroot}}"
              pullPolicy: IfNotPresent
              runAsUser: 101
              allowPrivilegeEscalation: true
            ingressClassByName: true
            ingressClassResource:
              controllerValue: k8s.io/ingress-{{item.0.key}}
              enabled: true
              name: "{{item.0.key}}"
            resources:
              limits:
                cpu: 500m
                memory: 900Mi
              requests:
                cpu: 100m
                memory: 90Mi
            replicaCount: 2
            minAvailable: 1
            maxUnavailable: 1
            autoscaling:
              enabled: false
              minReplicas: 1
              maxReplicas: 4
            service:
              enabled: true
              annotations:
                metallb.universe.tf/ip-allocated-from-pool: "{{INGRESS.NGINX.INGRESS_IPPOOL}}"
              loadBalancerIP: "{{item.1}}"
              type: LoadBalancer
              ports:
                http: 80
                https: 443
              targetPorts:
                http: http
                https: https
            priorityClassName: cluster-critical-pods
            admissionWebhooks:
              enabled: false
            proxySetHeaders:
              X-Is-From: "{{item.0.key}}"
            priorityClassName: cluster-critical-pods
            publishService:
              enabled: true
            metrics:
              enabled: true
              serviceMonitor:
                enabled: false
            config:
              client-body-buffer-size: "32k"
              client-header-buffer-size: "256k"
              large-client-header-buffers: "4 256k"
              proxy-buffer-size: "128k"
              log-format-escape-json: "true"
              log-format-upstream: '{"time":"$time_iso8601","proxy_protocol_addr":"$proxy_protocol_addr","remote_addr":"$remote_addr","x-forward-for":"$proxy_add_x_forwarded_for","request_id":"$req_id","request":"$request","remote_user":"$remote_user","bytes_sent":"$bytes_sent","body_bytes_sent":"$body_bytes_sent","request_time":"$request_time","status":"$status","vhost":"$host","request_proto":"$server_protocol","path":"$uri","request_query":"$args","request_length":"$request_length","method":"$request_method","http_referrer":"$http_referer","http_user_agent":"$http_user_agent","upstream":"$proxy_upstream_name","upstream_ip":"$upstream_addr","upstream_latency":"$upstream_response_time","upstream_status":"$upstream_status","tls":"$ssl_protocol/$ssl_cipher"}'
              ssl-ciphers: ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
              ssl-protocols: TLSv1 TLSv1.1 TLSv1.2 TLSv1.3
              enable-modsecurity: "true"
              modsecurity-snippet: |
                SecAuditLogType Serial
                SecAuditLog /var/log/audit/modsec.log
                SecAuditEngine RelevantOnly
                SecAuditLogRelevantStatus 403
                SecAuditLogFormat JSON
              use-gzip: "true"
              enable-brotli: "true"
              brotli-level: "3"
              http-snippet: "proxy_cache_path /tmp/nginx-cache-mp4 levels=1:2 keys_zone=mp4:50m max_size=256m inactive=30m use_temp_path=off;"
              brotli-types: "application/xml+rss application/atom+xml application/javascript application/x-javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/javascript text/plain text/x-component image/png"
              gzip-types: "application/atom+xml application/javascript application/x-javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/javascript text/plain text/x-component image/png"
      loop: "{{ INGRESS.NGINX.INGRESS_pools | dict2items | subelements('value') }}"

